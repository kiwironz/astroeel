---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets';
import placeholder from '../../content/projects/placeholder';

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  const imageModules = import.meta.glob('../../content/projects/**/*.{jpg,jpeg,png,webp}', { eager: true });
  console.log('imageModules:', Object.keys(imageModules));

  const paths = projects.map(project => {
    console.log('project:', project.slug);

    const imageKeys = Object.keys(imageModules)
      .filter(key => key.includes(`/${project.slug}/image-`))
      .sort((a, b) => {
        const numA = parseInt(a.match(/image-(\d+)/)?.[1] || 0);
        const numB = parseInt(b.match(/image-(\d+)/)?.[1] || 0);
        return numA - numB;
      });
    console.log('imageKeys:', imageKeys);

    const imageUrls = imageKeys.map(key => imageModules[key]).filter(Boolean);
    console.log('imageUrls:', imageUrls);

    let hero = placeholder;
    if (imageUrls.length > 0) {
      const heroImageModule = imageUrls.find(url => url.default.src.includes('image-00')) || imageUrls[0];
      hero = heroImageModule;
    }
    console.log('hero:', hero);

    return {
      params: { slug: project.slug },
      props: { 
        project, 
        images: imageUrls,
        heroImage: hero
      }
    };
  });
  return paths;
}

const { project, images, heroImage } = Astro.props;
---

<Layout 
  title={`${project.data.title} - Embedtronics Project`}
  description={project.data.description}
  keywords={project.data.tags.join(', ')}
>
  <section class="project-hero">
    <div class="container">
      <Image 
        src={heroImage}
        alt={project.data.title}
        width={800}
        height={600}
        class="hero-image"
      />
      <h1>{project.data.title}</h1>
      <p>{project.data.description}</p>
      <div class="project-tags">
        {project.data.tags.map(tag => <span class="tag">{tag}</span>)}
      </div>
    </div>
  </section>

  <section class="project-content">
    <div class="container">
      {project.data.challenge && (
        <div class="info-card">
          <h3>Challenge</h3>
          <p>{project.data.challenge}</p>
        </div>
      )}
      {project.data.solution && (
        <div class="info-card">
          <h3>Solution</h3>
          <p>{project.data.solution}</p>
        </div>
      )}
      <div class="info-card">
        <h3>Technologies</h3>
        <ul>
          {project.data.technologies.map(tech => <li>{tech}</li>)}
        </ul>
      </div>
      {project.data.specifications && (
        <div class="info-card">
          <h3>Specifications</h3>
          <dl>
            {Object.entries(project.data.specifications).map(([key, value]) => 
              value && (
                <>
                  <dt>{key.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}</dt>
                  <dd>{value}</dd>
                </>
              )
            )}
          </dl>
        </div>
      )}
      {project.data.testimonial && (
        <div class="info-card testimonial">
          <blockquote>
            <p>{project.data.testimonial.text}</p>
            <cite>{project.data.testimonial.author}{project.data.testimonial.company ? `, ${project.data.testimonial.company}` : ''}</cite>
          </blockquote>
        </div>
      )}
    </div>
  </section>

  {images.length > 0 && (
    <section class="project-gallery">
      <div class="container">
        <h2>Project Gallery</h2>
        <div class="gallery-grid">
          {images.map((imageUrl, index) => (
            <div class="gallery-item">
              <Image 
                src={imageUrl}
                alt={`Project image ${index + 1}`}
                width={400}
                height={300}
                class="gallery-image"
              />
            </div>
          ))}
        </div>
      </div>
    </section>
  )}
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  .project-hero {
    text-align: center;
    padding: 3rem 0;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  }
  .hero-image {
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }
  .project-hero h1 {
    font-size: 2.5rem;
    color: var(--primary);
    margin: 1rem 0;
  }
  .project-hero p {
    font-size: 1.2rem;
    color: var(--text-light);
  }
  .project-tags {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 1rem;
  }
  .tag {
    background: var(--accent);
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.85rem;
  }
  .project-content {
    padding: 3rem 0;
  }
  .info-card {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    margin-bottom: 2rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    border-left: 4px solid var(--accent);
  }
  .info-card h3 {
    color: var(--primary);
    margin-bottom: 1rem;
  }
  .info-card ul, .info-card dl {
    color: var(--text-light);
  }
  .info-card li, .info-card dd {
    margin-bottom: 0.5rem;
  }
  .testimonial blockquote {
    font-style: italic;
    border-left: 4px solid var(--accent);
    padding-left: 1rem;
    margin: 0;
  }
  .testimonial cite {
    display: block;
    margin-top: 1rem;
    font-weight: bold;
    color: var(--primary);
  }
  .project-gallery {
    padding: 3rem 0;
    background: #fafbfc;
  }
  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
  }
  .gallery-item {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  .gallery-image {
    width: 100%;
    height: auto;
    aspect-ratio: 4/3;
    object-fit: contain;
    transition: transform 0.3s;
  }
  .gallery-item:hover .gallery-image {
    transform: scale(1.05);
  }
  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: 1fr;
    }
    .hero-image {
      max-height: 300px;
    }
  }
</style>