---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';

const allProjects = await getCollection('projects');
const sortedProjects = allProjects.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

const featuredProjects = sortedProjects.filter(project => project.data.featured);
const otherProjects = sortedProjects.filter(project => !project.data.featured);

const categories = [...new Set(allProjects.map(project => project.data.category))];

// Remove { eager: true } - this was causing the issue
const imageModules = import.meta.glob('../content/projects/**/*.{jpg,jpeg,png,webp}');

async function getThumbnailImage(project: { slug: string; id: string }) {
  const allKeys = Object.keys(imageModules);
  const imageKeys = allKeys
    .filter(key => key.includes(`/${project.slug}/image-`))
    .sort((a, b) => {
      const numA = parseInt(a.match(/image-(\d+)/)?.[1] || 0);
      const numB = parseInt(b.match(/image-(\d+)/)?.[1] || 0);
      return numA - numB;
    });

  // Look for image-00 first, then any other image
  const imageKey = imageKeys.find(key => key.includes('image-00')) || imageKeys[0];
  
  if (imageKey && imageModules[imageKey]) {
    return imageModules[imageKey];
  }
  
  // Return placeholder from the glob
  const placeholderKey = allKeys.find(key => key.includes('/placeholder.jpg'));
  return placeholderKey ? imageModules[placeholderKey] : null;
}

// Pre-fetch thumbnails
const projectThumbnails = await Promise.all(
  allProjects.map(async project => ({
    ...project,
    thumbnail: await getThumbnailImage(project)
  }))
);

const featuredWithThumb = featuredProjects.map(p => projectThumbnails.find(pt => pt.slug === p.slug));
const otherWithThumb = otherProjects.map(p => projectThumbnails.find(pt => pt.slug === p.slug));
---

<Layout 
  title="Custom Electronics Projects - EEL Portfolio"
  description="Browse our portfolio of custom electronic devices, IoT solutions, and automation systems. From concept to working prototype."
  keywords="electronics portfolio, custom devices, IoT projects, sensor systems, automation, electronic prototypes">

<section class="projects-hero">
  <div class="container">
    <h1>Project Portfolio</h1>
    <p class="hero-subtitle">Custom electronic solutions that solve real-world challenges</p>
  </div>
</section>

<section class="projects-filter">
  <div class="container">
    <div class="filter-buttons">
      <button class="filter-btn active" data-filter="all">All Projects</button>
      {categories.map(category => (
        <button class="filter-btn" data-filter={category.toLowerCase().replace(/\s+/g, '-')}>
          {category}
        </button>
      ))}
    </div>
  </div>
</section>

{featuredWithThumb.length > 0 && (
  <section class="featured-section">
    <div class="container">
      <h2>Featured Projects</h2>
      <div class="projects-grid featured">
        {featuredWithThumb.map(project => (
          <article class="project-card featured-card" data-category={project.data.category.toLowerCase().replace(/\s+/g, '-')}>
            <div class="project-image">
              {project.thumbnail ? (
                <Image 
                  src={project.thumbnail()}
                  alt={project.data.title}
                  width={400}
                  height={300}
                  loading="lazy"
                />
              ) : (
                <div style="width: 400px; height: 300px; background: #f0f0f0; display: flex; align-items: center; justify-content: center;">
                  No image
                </div>
              )}
              <div class="project-overlay">
                <div class="image-count"><span class="gallery-icon">üñºÔ∏è</span><span>Gallery</span></div>
                <div class="project-tags">
                  {project.data.tags.slice(0, 3).map(tag => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              </div>
            </div>
            <div class="project-content">
              <div class="project-meta">
                <span class="category">{project.data.category}</span>
                <span class="date">{new Date(project.data.date).toLocaleDateString()}</span>
              </div>
              <h3>
                <a href={`/projects/${project.slug}`}>{project.data.title}</a>
              </h3>
              <p>{project.data.description}</p>
              <div class="project-footer">
                <div class="technologies">
                  {project.data.technologies.slice(0, 3).map(tech => (
                    <span class="tech">{tech}</span>
                  ))}
                </div>
                <a href={`/projects/${project.slug}`} class="read-more">
                  View Project ‚Üí
                </a>
              </div>
            </div>
          </article>
        ))}
      </div>
    </div>
  </section>
)}

<section class="all-projects">
  <div class="container">
    {!featuredWithThumb.length && <h2>All Projects</h2>}
    <div class="projects-grid">
      {otherWithThumb.map(project => (
        <article class="project-card" data-category={project.data.category.toLowerCase().replace(/\s+/g, '-')}>
          <div class="project-image">
            {project.thumbnail ? (
              <Image 
                src={project.thumbnail()}
                alt={project.data.title}
                width={400}
                height={300}
                loading="lazy"
              />
            ) : (
              <div style="width: 400px; height: 300px; background: #f0f0f0; display: flex; align-items: center; justify-content: center;">
                No image
              </div>
            )}
            <div class="project-overlay">
              <div class="image-count"><span class="gallery-icon">üñºÔ∏è</span><span>Gallery</span></div>
            </div>
          </div>
          <div class="project-content">
            <div class="project-meta">
              <span class="category">{project.data.category}</span>
              <span class="date">{new Date(project.data.date).toLocaleDateString()}</span>
            </div>
            <h3>
              <a href={`/projects/${project.slug}`}>{project.data.title}</a>
            </h3>
            <p>{project.data.description}</p>
            <div class="project-footer">
              <div class="technologies">
                {project.data.technologies.slice(0, 2).map(tech => (
                  <span class="tech">{tech}</span>
                ))}
              </div>
              <a href={`/projects/${project.slug}`} class="read-more">
                View Details ‚Üí
              </a>
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</section>

</Layout>

<style>
  .projects-hero {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 3rem 0;
    text-align: center;
  }
  
  .projects-hero h1 {
    font-size: 2.5rem;
    color: var(--primary);
    margin-bottom: 1rem;
  }
  
  .hero-subtitle {
    font-size: 1.1rem;
    color: var(--text-light);
    max-width: 600px;
    margin: 0 auto;
  }
  
  .projects-filter {
    padding: 1.5rem 0;
    background: white;
    border-bottom: 1px solid var(--border);
    position: sticky;
    top: 70px;
    z-index: 50;
  }
  
  .filter-buttons {
    display: flex;
    gap: 0.8rem;
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .filter-btn {
    padding: 0.4rem 1rem;
    border: 2px solid var(--border);
    background: white;
    color: var(--text);
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s;
    font-weight: 500;
    font-size: 0.9rem;
  }
  
  .filter-btn:hover, .filter-btn.active {
    background: var(--accent);
    color: white;
    border-color: var(--accent);
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }
  
  .featured-section, .all-projects {
    padding: 3rem 0;
  }
  
  .featured-section h2, .all-projects h2 {
    text-align: center;
    font-size: 2rem;
    color: var(--primary);
    margin-bottom: 2rem;
  }
  
  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 1.5rem;
    justify-items: center;
  }
  
  .project-card {
    background: white;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    transition: all 0.3s;
    width: 100%;
    max-width: 350px;
  }
  
  .project-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  }
  
  .featured-card .project-image {
    height: 260px;
  }
  
  .project-image {
    position: relative;
    height: 200px;
    overflow: hidden;
  }
  
  .project-image img {
    width: 100%;
    height: auto;
    aspect-ratio: 4 / 3;
    object-fit: cover;
  }
  
  .project-card:hover .project-image img {
    transform: scale(1.05);
  }
  
  .project-overlay {
    position: absolute;
    top: 0.8rem;
    right: 0.8rem;
    opacity: 0;
    transition: opacity 0.3s;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .project-card:hover .project-overlay {
    opacity: 1;
  }
  
  .image-count {
    display: flex;
    align-items: center;
    gap: 0.3rem;
    background: rgba(0,0,0,0.7);
    color: white;
    padding: 0.3rem 0.6rem;
    border-radius: 12px;
    font-size: 0.8rem;
  }
  
  .gallery-icon {
    font-size: 0.9rem;
  }
  
  .project-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }
  
  .tag {
    background: rgba(255,255,255,0.9);
    color: var(--primary);
    padding: 0.2rem 0.6rem;
    border-radius: 12px;
    font-size: 0.7rem;
  }
  
  .project-content {
    padding: 1.2rem;
  }
  
  .project-meta {
    display: flex;
    justify-content: space-between;
    font-size: 0.8rem;
    margin-bottom: 0.5rem;
  }
  
  .category {
    background: var(--secondary);
    color: var(--accent);
    padding: 0.2rem 0.6rem;
    border-radius: 10px;
  }
  
  .date {
    color: var(--text-light);
  }
  
  .project-content h3 {
    margin-bottom: 0.5rem;
  }
  
  .project-content h3 a {
    color: var(--primary);
    text-decoration: none;
    font-size: 1.1rem;
  }
  
  .project-content h3 a:hover {
    color: var(--accent);
  }
  
  .project-content p {
    color: var(--text-light);
    font-size: 0.9rem;
    line-height: 1.5;
    margin-bottom: 0.8rem;
  }
  
  .project-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.8rem;
  }
  
  .technologies {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }
  
  .tech {
    background: #f0f8ff;
    color: var(--accent);
    padding: 0.2rem 0.5rem;
    border-radius: 8px;
    font-size: 0.7rem;
  }
  
  .read-more {
    color: var(--accent);
    text-decoration: none;
    font-size: 0.85rem;
    white-space: nowrap;
  }
  
  .read-more:hover {
    color: var(--primary);
  }
  
  .project-card.hidden {
    display: none;
  }
  
  @media (max-width: 768px) {
    .projects-hero h1 {
      font-size: 1.8rem;
    }
    
    .projects-grid {
      grid-template-columns: 1fr;
      justify-items: stretch;
    }
    
    .project-card {
      max-width: 100%;
    }
    
    .project-image {
      height: 200px;
    }
    
    .project-footer {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .project-overlay {
      position: static;
      opacity: 1;
      background: rgba(0,0,0,0.7);
      color: white;
      padding: 0.5rem;
      margin: 0.5rem;
      border-radius: 8px;
      flex-direction: row;
      justify-content: space-between;
    }
    
    .project-tags {
      flex-direction: row;
    }
    
    .image-count {
      background: rgba(255,255,255,0.2);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const projectCards = document.querySelectorAll('.project-card');
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.getAttribute('data-filter');
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        projectCards.forEach(card => {
          const category = card.getAttribute('data-category');
          card.classList.toggle('hidden', filter !== 'all' && category !== filter);
        });
      });
    });
  });
</script>